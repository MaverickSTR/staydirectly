CREATE TABLE "api_integrations" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"service_type" text NOT NULL,
	"api_key" text,
	"api_secret" text,
	"base_url" text,
	"is_active" boolean DEFAULT true,
	"last_synced_at" timestamp,
	"sync_frequency" text DEFAULT 'daily',
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "cities" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"country" text NOT NULL,
	"state" text,
	"description" text NOT NULL,
	"long_description" text,
	"latitude" double precision,
	"longitude" double precision,
	"image_url" text NOT NULL,
	"additional_images" text[],
	"property_count" integer DEFAULT 0,
	"featured" boolean DEFAULT false,
	"slug" text,
	"meta_title" text,
	"meta_description" text,
	"keywords" text[],
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now(),
	CONSTRAINT "cities_slug_unique" UNIQUE("slug")
);
--> statement-breakpoint
CREATE TABLE "favorites" (
	"id" serial PRIMARY KEY NOT NULL,
	"user_id" integer NOT NULL,
	"property_id" integer NOT NULL,
	"created_at" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "neighborhoods" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"city_id" integer NOT NULL,
	"description" text,
	"long_description" text,
	"latitude" double precision,
	"longitude" double precision,
	"image_url" text NOT NULL,
	"additional_images" text[],
	"property_count" integer DEFAULT 0,
	"slug" text,
	"meta_title" text,
	"meta_description" text,
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now(),
	CONSTRAINT "neighborhoods_slug_unique" UNIQUE("slug")
);
--> statement-breakpoint
CREATE TABLE "properties" (
	"id" serial PRIMARY KEY NOT NULL,
	"name" text NOT NULL,
	"title" text,
	"description" text NOT NULL,
	"location" text NOT NULL,
	"city" text NOT NULL,
	"state" text,
	"zip_code" text,
	"country" text NOT NULL,
	"neighborhood" text,
	"latitude" double precision,
	"longitude" double precision,
	"price" integer NOT NULL,
	"weekend_price" integer,
	"weekly_price" integer,
	"monthly_price" integer,
	"cleaning_fee" integer,
	"service_fee" integer,
	"tax_rate" double precision,
	"min_stay" integer DEFAULT 1,
	"max_stay" integer,
	"rating" double precision,
	"review_count" integer DEFAULT 0,
	"type" text DEFAULT 'Apartment',
	"property_size" integer,
	"year_built" integer,
	"bedrooms" integer NOT NULL,
	"bathrooms" integer NOT NULL,
	"max_guests" integer NOT NULL,
	"amenities" text[],
	"featured_amenities" text[],
	"capacity" jsonb,
	"bedroom_details" jsonb,
	"image_url" text NOT NULL,
	"additional_images" text[],
	"video_url" text,
	"virtual_tour_url" text,
	"images_stored_at" timestamp,
	"host_id" integer NOT NULL,
	"host_name" text NOT NULL,
	"host_image" text,
	"booking_widget_url" text,
	"review_widget_code" text,
	"calendar_sync_url" text,
	"pms_id" text,
	"channel_manager_id" text,
	"external_id" text,
	"external_source" text,
	"platform_id" text,
	"last_synced_at" timestamp,
	"slug" text,
	"meta_title" text,
	"meta_description" text,
	"canonical_url" text,
	"keywords" text[],
	"is_featured" boolean DEFAULT false,
	"is_active" boolean DEFAULT true,
	"is_verified" boolean DEFAULT false,
	"status" text DEFAULT 'active',
	"created_at" timestamp DEFAULT now(),
	"updated_at" timestamp DEFAULT now(),
	"published_at" timestamp,
	CONSTRAINT "properties_slug_unique" UNIQUE("slug")
);
--> statement-breakpoint
CREATE TABLE "reviews" (
	"id" serial PRIMARY KEY NOT NULL,
	"property_id" integer NOT NULL,
	"user_id" integer NOT NULL,
	"user_name" text NOT NULL,
	"user_image" text,
	"rating" double precision NOT NULL,
	"title" text,
	"comment" text NOT NULL,
	"response" text,
	"response_date" timestamp,
	"is_verified" boolean DEFAULT false,
	"date" timestamp DEFAULT now()
);
--> statement-breakpoint
CREATE TABLE "users" (
	"id" serial PRIMARY KEY NOT NULL,
	"username" text NOT NULL,
	"password" text NOT NULL,
	"email" text,
	"full_name" text,
	"is_admin" boolean DEFAULT false,
	"created_at" timestamp DEFAULT now(),
	CONSTRAINT "users_username_unique" UNIQUE("username"),
	CONSTRAINT "users_email_unique" UNIQUE("email")
);
